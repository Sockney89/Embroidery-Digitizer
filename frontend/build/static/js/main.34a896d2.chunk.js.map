{"version":3,"sources":["components/Footer.tsx","assets/images/Embroider.png","assets/images/Inkstitch.png","pages/Home.tsx","constants.ts","components/Dropzone.tsx","assets/images/FilledExample.png","assets/images/UnfilledExample.png","pages/Upload.tsx","pages/Preview.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Footer","sticky","style","textAlign","position","bottom","width","color","href","Home","history","useHistory","useState","stage","setStage","popup","setPopup","useEffect","setTimeout","type","bg","top","zIndex","Fade","in","fontSize","Collapse","display","Button","onClick","Modal","centered","show","onHide","Header","closeButton","Title","Body","justifyContent","border","borderRadius","height","margin","padding","src","Inkstitch","objectFit","marginLeft","marginRight","OverlayTrigger","placement","overlay","Tooltip","id","size","variant","Embroider","push","API_ENDPOINT","Dropzone","file_drop_div","image","upload_help_label","setFile","filename","setFilename","reading","setReading","readingProgress","setReadingProgress","fileDragged","borderStyle","borderColor","backgroundColor","fileNotDragged","document","getElementById","action","method","encType","onDragEnter","onMouseUp","onDragLeave","onChange","fname","value","split","pop","includes","innerHTML","reader","FileReader","onload","event","target","result","onprogress","percent","loaded","total","Math","round","readAsDataURL","files","name","accept","className","viewBox","fill","xmlns","fill-rule","d","marginTop","paddingBottom","ProgressBar","now","justifySelf","hidden","Upload","setEmb","dropzoneSet","setDropzoneSet","dropdown","setDropdown","setValue","popupType","setPopupType","pressed","setPressed","overflow","e","preventDefault","Dropdown","Toggle","Menu","map","extension","Item","ToggleButtonGroup","$","documentElement","body","animate","scrollTop","offset","ToggleButton","fileInput","data","FormData","append","toLowerCase","toString","fetch","then","response","json","catch","err","alert","sendFile","disabled","Spinner","as","animation","role","aria-hidden","FilledImage","UnfilledImage","Preview","embResult","M_amount","animating","setAnimating","downloadStatus","setDownloadStatus","randomColor","floor","random","sleep","ms","Promise","resolve","showToast","msg","toast","x","replace","run","a","run_button","progress_bar","progress","canvas","ctx","getContext","points","gcode","length","multiply","clearRect","max_x","Infinity","max_y","min_x","min_y","forEach","point","max","min","x_ratio","y_ratio","moveTo","strokeStyle","beginPath","i","y","closePath","newColor","window","Toastify","text","duration","lineTo","stroke","download","set","uid","status","blob","url","URL","createObjectURL","createElement","file","addEventListener","clickHandler","revokeObjectURL","removeEventListener","appendChild","click","aria-valuemin","aria-valuemax","to","App","require","emb","basename","path","exact","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.34a896d2.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Footer: React.FC<{sticky?: boolean}> = ({sticky}) => {\r\n    return (\r\n        <footer style={{textAlign: \"center\", position: sticky ? \"sticky\" : \"absolute\", bottom: \"5px\", width: \"100%\", color: \"gray\"}}>\r\n            This project is <a href=\"https://github.com/sanjithudupa/embroidery-digitizer\">Open Source.</a>\r\n            <br/>\r\n            <span>&#169;</span> 2021 <a href=\"https://youtube.com/sanjithar\">Sanjith Udupa</a>, All Rights Reserved.\r\n        </footer>\r\n    )\r\n}\r\n\r\nexport default Footer;","export default __webpack_public_path__ + \"static/media/Embroider.e420d380.png\";","export default __webpack_public_path__ + \"static/media/Inkstitch.3b3f493f.png\";","import React, { useEffect, useState } from \"react\";\r\n\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Footer from \"../components/Footer\";\r\n\r\nimport ParticleBG from \"particles-bg\"\r\nimport { useHistory } from \"react-router\";\r\nimport { Collapse, Fade, Modal, OverlayTrigger, Tooltip } from \"react-bootstrap\";\r\nimport { CustomPlaceholder } from 'react-placeholder-image';\r\n\r\nimport { Search, Clock, AppIndicator, ClockHistory, ZoomIn, Window } from \"react-bootstrap-icons\";\r\n\r\nimport Embroider from \"../assets/images/Embroider.png\";\r\nimport Inkstitch from \"../assets/images/Inkstitch.png\";\r\n\r\nconst Home: React.FC = () => {\r\n\r\n    const history = useHistory();\r\n    const [stage, setStage] = useState(0);\r\n\r\n    const [popup, setPopup] = useState(false);\r\n\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            setStage(1)\r\n            setTimeout(() => {\r\n                setStage(2)\r\n                setTimeout(() => {\r\n                    setStage(3)\r\n                    setTimeout(() => {\r\n                        setStage(4)\r\n                    }, 500)\r\n                }, 750)\r\n            }, 600)\r\n        }, 500)\r\n    },[])\r\n\r\n    return (\r\n        <div>\r\n            <ParticleBG type=\"cobweb\" bg={true} color=\"#A23B72\" /> \r\n\r\n            <div style={{position: \"absolute\", top: \"30%\", width: \"100%\", textAlign: \"center\", zIndex: 0}}>\r\n                <Fade in={stage >= 1}>\r\n                    <h1 style={{fontSize:50}}>Embroidery made \r\n                        <Collapse in={stage >= 1}>\r\n                            <div style={{display: \"inline\"}}>\r\n                                <span style={{color: \"#F18F01\"}}> simple.</span>\r\n                            </div>\r\n                        </Collapse>\r\n                    </h1>\r\n                </Fade>\r\n\r\n                <Fade in={stage >= 2}>\r\n                    <div>\r\n                        Easily convert images to embroidery files <strong>in seconds.</strong> <a href=\"#\">See how it works.</a>\r\n                        <br/>\r\n                        <br/>\r\n                    </div>\r\n                </Fade>\r\n\r\n                <Fade in={stage >= 3}>\r\n                    <div>\r\n                        <i>Ready to start making great designs?</i>\r\n                        <br/>\r\n                        <br></br>\r\n                        <Fade in={stage >= 4}>\r\n                            <Button color=\"#A23B72\" onClick={() => setPopup(true) /*history.push(\"/upload\")*/}>Get Started</Button>\r\n                        </Fade>\r\n                    </div>\r\n                </Fade>\r\n            </div>\r\n\r\n            <Footer />\r\n\r\n            <Modal centered show={popup} onHide={() => setPopup(false)} style={{textAlign: \"center\"}}>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>Choose an embroidery strategy:</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body style={{display: \"flex\", justifyContent: \"center\"}}>\r\n                    <div style={{border: \"2px solid gray\", borderRadius: 5, height: \"230px\", width: \"100%\", margin: 10, padding: \"10px\"}}>\r\n                        <h5>InkStitch</h5>\r\n                        <img src={Inkstitch} style={{width: 180, height: 105, objectFit: \"cover\", border: \"2px solid black\"}} />\r\n                        {/* <CustomPlaceholder width={180} height={105} style={{borderRadius: 5}} /> */}\r\n                        <br />\r\n                        <div style={{margin: 5, display: \"flex\", justifyContent: \"center\"}}>\r\n                            <div style={{marginLeft: 5, marginRight: 5}}>\r\n                                <OverlayTrigger placement=\"top\" overlay={<Tooltip id=\"search\">High Quality</Tooltip>}>\r\n                                    <Search size={20} color=\"#44DA27\" />\r\n                                </OverlayTrigger>\r\n                            </div>\r\n                            <div style={{marginLeft: 5, marginRight: 5}}>\r\n                                <OverlayTrigger placement=\"top\" overlay={<Tooltip id=\"search\">Takes 15-25 min</Tooltip>}>\r\n                                    <Clock size={20} color=\"#A23B72\" />\r\n                                </OverlayTrigger>\r\n                            </div>\r\n                            <div style={{marginLeft: 5, marginRight: 5}}>\r\n                                <OverlayTrigger placement=\"top\" overlay={<Tooltip id=\"search\">Installation Required</Tooltip>}>\r\n                                    <AppIndicator size={20} color=\"#A23B72\" />\r\n                                </OverlayTrigger>\r\n                            </div>\r\n                        </div>\r\n                        {/* <i style={{fontSize: 12}}>15-25 min, High Quality, Requires Installation</i> */}\r\n                        <Button variant=\"info\">\r\n                            Read\r\n                        </Button>\r\n                    </div>\r\n                    <div style={{border: \"2px solid gray\", borderRadius: 5, height: \"230px\", width: \"100%\", margin: 10, padding: \"10px\"}}>\r\n                        <h5>Embroider.App</h5>\r\n                        <img src={Embroider} style={{width: 180, height: 105, objectFit: \"cover\", border: \"2px solid black\"}} />\r\n                        {/* <CustomPlaceholder width={180} height={105} style={{borderRadius: 5}} /> */}\r\n                        <br />\r\n                        <div style={{margin: 5, display: \"flex\", justifyContent: \"center\"}}>\r\n                            <div style={{marginLeft: 5, marginRight: 5}}>\r\n                                <OverlayTrigger placement=\"top\" overlay={<Tooltip id=\"search\">Takes <span>&#60;</span>5 min</Tooltip>}>\r\n                                    <ClockHistory size={20} color=\"#44DA27\" />\r\n                                </OverlayTrigger>\r\n                            </div>\r\n                            <div style={{marginLeft: 5, marginRight: 5}}>\r\n                                <OverlayTrigger placement=\"top\" overlay={<Tooltip id=\"search\">Fully in Browser, no installation required.</Tooltip>}>\r\n                                    <Window size={20} color=\"#44DA27\" />\r\n                                </OverlayTrigger>\r\n                            </div>\r\n                            <div style={{marginLeft: 5, marginRight: 5}}>\r\n                                <OverlayTrigger placement=\"top\" overlay={<Tooltip id=\"search\">Moderate Quality</Tooltip>}>\r\n                                    <ZoomIn size={20} color=\"#A23B72\" />\r\n                                </OverlayTrigger>\r\n                            </div>\r\n                        </div>\r\n                        {/* <i style={{fontSize: 12}}>15-25 min, High Quality, Requires Installation</i> */}\r\n                        <Button variant=\"success\" onClick={() => {\r\n                            setPopup(false);\r\n                            setTimeout(() => {\r\n                                history.push(\"/upload\");\r\n                            }, 500)\r\n                        }}>\r\n                            Get Started\r\n                        </Button>\r\n                    </div>\r\n                </Modal.Body>\r\n            </Modal>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home;","const API_ENDPOINT = \"http://embdigit.cap.wise-creations.com/api\";\r\n\r\nexport {\r\n    API_ENDPOINT\r\n}","import React, { useEffect, useState } from \"react\";\r\nimport ProgressBar from \"react-bootstrap/ProgressBar\";\r\n\r\nimport { API_ENDPOINT } from \"../constants\";\r\n\r\nimport \"../styles/dropzone.css\";\r\n\r\nconst Dropzone: React.FC<{setFile?: Function}> = ({setFile}) => {\r\n    let file_drop_div: HTMLDivElement;\r\n    let image: HTMLInputElement;\r\n    let upload_help_label: HTMLLabelElement;\r\n\r\n    const [filename, setFilename] = useState(\"\");\r\n    const [reading, setReading] = useState(false);\r\n    const [readingProgress, setReadingProgress] = useState(0);\r\n\r\n    // const FPS = 30;\r\n    // const [translate, setTranslate] = useState(0);\r\n    // const [scale, setScale] = useState(1);\r\n    \r\n    useEffect(() => {\r\n        file_drop_div = document.getElementById(\"file-drop-div\") as HTMLDivElement;\r\n        image = document.getElementById(\"image\") as HTMLInputElement;\r\n        upload_help_label = document.getElementById(\"upload-help-label\") as HTMLLabelElement;\r\n\r\n        // let frame = 0;\r\n\r\n        // setInterval(() => {\r\n        //     if (frame >= 600)\r\n        //         frame = 0\r\n            \r\n        //     setTranslate(Math.sin(frame/100));\r\n        //     setScale(-0.6 * Math.sin(frame));\r\n            \r\n        //     frame++;\r\n        // }, 1000/FPS);\r\n    }, []);\r\n\r\n    function fileDragged() {\r\n        if (file_drop_div) {\r\n            file_drop_div.style.borderStyle = \"solid\";\r\n            file_drop_div.style.borderColor = \"black\";\r\n            file_drop_div.style.backgroundColor = \"#f8f9fa\";\r\n        }\r\n    }\r\n    function fileNotDragged() {\r\n        if (file_drop_div) {\r\n            file_drop_div.style.borderStyle = \"dashed\";\r\n            file_drop_div.style.borderColor = \"#6c757d\";\r\n            file_drop_div.style.backgroundColor = \"transparent\";\r\n        }\r\n    }\r\n\r\n    function resetFileUpload(){\r\n        image.value = \"\"\r\n        upload_help_label.innerHTML = \"<strong>Click to select or drag an image...</strong>\"\r\n        fileNotDragged();\r\n    }\r\n\r\n    function fileAdded(){\r\n        fileNotDragged();\r\n        let fname = image.value.split(/(\\\\|\\/)/g).pop()!;\r\n        if(fname.includes(\".\")){\r\n            setFilename(fname);\r\n        }else{\r\n            resetFileUpload();\r\n        }\r\n        \r\n        const reader = new FileReader();\r\n        setReading(true);\r\n\r\n        reader.onload = (event) => {\r\n            const result = event.target!.result;\r\n            if(setFile)\r\n                setFile()\r\n            setReading(false);\r\n        };\r\n\r\n        reader.onprogress = (event) => {\r\n            const percent = ((event.loaded / event.total) * 100);\r\n            setReadingProgress(Math.round(percent));\r\n        };\r\n\r\n        reader.readAsDataURL(image.files![0]);\r\n    }\r\n\r\n    return (\r\n        <form id=\"dropzone_form\" action={`${API_ENDPOINT}/upload`} method = \"POST\" encType=\"multipart/form-data\">\r\n            <div id=\"file-drop-div\" onDragEnter={fileDragged} onClick={fileDragged} onMouseUp={fileNotDragged} onDragLeave={fileNotDragged}>\r\n                <input onChange={fileAdded} type=\"file\" name=\"image\" accept=\".svg\" id=\"image\" />\r\n                \r\n                <div id=\"svg-container\">\r\n                <svg id=\"upload-icon\" className=\"bi bi-upload\" width=\"10%\" viewBox=\"0 0 16 16\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                    {/* <g transform={`translate(0, ${0}) scale(1, ${1})`}> */}\r\n                        <path fill-rule=\"evenodd\" d=\"M8 2a.5.5 0 0 1 .5.5v8a.5.5 0 0 1-1 0v-8A.5.5 0 0 1 8 2z\"/>\r\n                        <path d=\"M5 4.854a.5.5 0 0 0 .707 0L8 2.56l2.293 2.293A.5.5 0 1 0 11 4.146L8.354 1.5a.5.5 0 0 0-.708 0L5 4.146a.5.5 0 0 0 0 .708z\" />\r\n                    {/* </g> */}\r\n                    <path fill-rule=\"evenodd\" d=\"M.5 8a.5.5 0 0 1 .5.5V12a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V8.5a.5.5 0 0 1 1 0V12a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V8.5A.5.5 0 0 1 .5 8z\"/>\r\n                </svg>\r\n\r\n                {/* <svg id=\"upload-icon\" className=\"bi bi-upload\" xmlns=\"http://www.w3.org/2000/svg\" enable-background=\"new 0 0 24 24\" viewBox=\"0 0 24 24\" width=\"15%\" fill=\"#000000\">\r\n                    <g>\r\n                        <rect fill=\"none\" height=\"24\" width=\"24\"/>\r\n                    </g>\r\n                    <g>\r\n                        <path strokeWidth=\"5\" d=\"M18,15v3H6v-3H4v3c0,1.1,0.9,2,2,2h12c1.1,0,2-0.9,2-2v-3H18z M7,9l1.41,1.41L11,7.83V16h2V7.83l2.59,2.58L17,9l-5-5L7,9z\"/>\r\n                    </g>\r\n                </svg> */}\r\n\r\n\r\n                </div>\r\n                \r\n                <div id=\"help-label-container\" style={{textAlign: \"center\", marginTop: `-${reading ? 80 : 50}px`, paddingBottom: \"px\"}}>\r\n                    <label id=\"upload-help-label\"><strong>Click to select or drag an image...</strong> <br /> <strong style={{color: \"#A23B72\"}}>{filename}</strong> </label>\r\n                    {\r\n                        reading ?\r\n                        <ProgressBar now={readingProgress} style={{ width: \"75%\", justifySelf: \"center\", margin: \"auto\", height: \"10px\"}} />\r\n                        : <></>\r\n                    }\r\n                </div>\r\n            </div>\r\n\r\n            <input id=\"ext_input\" type=\"text\" hidden name=\"extension\" />\r\n            <input id=\"fill_input\" type=\"checkbox\" hidden name=\"fill\" />\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default Dropzone;","export default __webpack_public_path__ + \"static/media/FilledExample.c79c058b.png\";","export default __webpack_public_path__ + \"static/media/UnfilledExample.752b7844.png\";","import React, { useEffect, useState } from \"react\";\r\nimport { Button, Collapse, Modal, Spinner, ToggleButton, ToggleButtonGroup } from \"react-bootstrap\";\r\nimport Dropdown from \"react-bootstrap/Dropdown\";\r\nimport Dropzone from \"../components/Dropzone\";\r\nimport Footer from \"../components/Footer\";\r\n\r\nimport $ from \"jquery\";\r\nimport { API_ENDPOINT } from \"../constants\";\r\nimport { useHistory } from \"react-router\";\r\n\r\nimport FilledImage from \"../assets/images/FilledExample.png\";\r\nimport UnfilledImage from \"../assets/images/UnfilledExample.png\";\r\n\r\nconst Upload: React.FC<{setEmb: Function}> = ({setEmb}) => {\r\n\r\n    const extensions = [\r\n        \"PES\",\r\n        \"PEC\",\r\n        \"DST\",\r\n        \"EXP\",\r\n        \"JST\",\r\n        \"VP3\",\r\n        \"U01\"\r\n    ]\r\n\r\n    const [dropzoneSet, setDropzoneSet] = useState(false);\r\n\r\n    const [dropdown, setDropdown] = useState(\"Output File Type\");\r\n    const [value, setValue] = useState(\"\");\r\n    const [popup, setPopup] = useState(false);\r\n    const [popupType, setPopupType] = useState(true);\r\n\r\n    const [pressed, setPressed] = useState(false);\r\n\r\n    const history = useHistory();\r\n\r\n    const sendFile = () => {\r\n        setPressed(true);\r\n\r\n        const fileInput = document.getElementById(\"image\") as HTMLInputElement;\r\n\r\n        const data = new FormData();\r\n        data.append(\"image\", fileInput.files![0]);\r\n        data.append(\"extension\", `.${dropdown.toLowerCase()}`);\r\n        data.append(\"fill\", (value == \"Yes\").toString());\r\n\r\n        fetch(API_ENDPOINT + \"/digitize\", {\r\n            method: \"POST\",\r\n            body: data\r\n        }).then((response) => {\r\n            response.json().then((body) => {\r\n                setEmb(body);\r\n                history.push(\"/preview\");\r\n            }).catch((err) => {\r\n                alert(err);\r\n            });\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div style={{height: \"100%\", overflow: \"hidden\"}}>\r\n            <div style={{textAlign: \"center\", height: \"99%\", overflow: \"auto\"}}>\r\n                <br />\r\n                <h2>Let's start digitizing!</h2>\r\n                <br />\r\n\r\n                <h6>First, <strong>upload</strong> an SVG image file.</h6>\r\n                <br />\r\n\r\n                <Dropzone setFile={() => setDropzoneSet(true)} />\r\n\r\n                <br />\r\n\r\n                <Collapse in={dropzoneSet}>\r\n                    <div>\r\n                        <h6>Now, choose your <strong>output file type.</strong></h6>\r\n                        <a href=\"#\" onClick={(e) => {\r\n                            e.preventDefault();\r\n                            setPopupType(false);\r\n                            setPopup(true);\r\n                        }}>Not sure which type to choose?</a>\r\n\r\n                        <br />\r\n                        <br />\r\n\r\n                        <Dropdown>\r\n                            <Dropdown.Toggle variant=\"info\">\r\n                                {dropdown}\r\n                            </Dropdown.Toggle>\r\n\r\n                            <Dropdown.Menu>\r\n                                {\r\n                                    extensions.map((extension) => {\r\n                                        return <Dropdown.Item onClick={() => setDropdown(extension)}>{extension}</Dropdown.Item>\r\n                                    })\r\n                                }\r\n                            </Dropdown.Menu>\r\n\r\n                        </Dropdown>\r\n\r\n                        <br />\r\n                        <br />\r\n                    </div>\r\n                </Collapse>\r\n\r\n                <Collapse in={dropdown != \"Output File Type\"}>\r\n                    <div>\r\n                        Great, would you like your file to be <strong>filled?</strong>\r\n                        <br />\r\n                        <a href=\"#\" onClick={(e) => {\r\n                            e.preventDefault();\r\n                            setPopupType(true);\r\n                            setPopup(true);\r\n                        }}>Show me what this means.</a>\r\n\r\n                        <br />\r\n                        <br />\r\n\r\n                        <ToggleButtonGroup\r\n                            name=\"value\"\r\n                            type=\"radio\"\r\n                            value={value}\r\n                            onChange={(value) => {\r\n                                setValue(value);\r\n                                setTimeout(() => {\r\n                                    $([document.documentElement, document.body]).animate({\r\n                                        scrollTop: $(\"#sendButton\").offset()!.top\r\n                                    }, 1000);\r\n                                }, 50);\r\n                            }}\r\n                        >\r\n                            <ToggleButton value={\"Yes\"} variant=\"secondary\">Yes</ToggleButton>\r\n                            <ToggleButton value={\"No\"} variant=\"secondary\">No</ToggleButton>\r\n                        </ToggleButtonGroup>\r\n\r\n                        <br />\r\n                        <br />\r\n                    </div>\r\n                </Collapse>\r\n\r\n                <Collapse in={value == \"Yes\" || value == \"No\"}>\r\n                    <div>\r\n                        Now, start the digitzation process!\r\n                        <br />\r\n                        <i>This may take up to two minutes</i>\r\n\r\n                        <br />\r\n                        <br />\r\n\r\n                        <Button id=\"sendButton\" variant=\"success\" onClick={() => sendFile()} disabled={pressed}>\r\n                            { pressed ?\r\n                                <Spinner\r\n                                    as=\"span\"\r\n                                    animation=\"border\"\r\n                                    size=\"sm\"\r\n                                    role=\"status\"\r\n                                    aria-hidden=\"true\"\r\n                                /> :\r\n                                <span>Digitize!</span>\r\n                            }\r\n                        </Button>\r\n\r\n                        <br />\r\n                    </div>\r\n                </Collapse>           \r\n\r\n            </div>\r\n            <br />\r\n            <br />\r\n            <Footer sticky={dropdown != \"Output File Type\"} />\r\n\r\n            <Modal centered show={popup} onHide={() => setPopup(false)} style={{textAlign: \"center\"}}>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>{popupType ? \"Filled Embroidery\" : \"What File Type Should I Use?\"}</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    {\r\n                        popupType ? \r\n                        <div>\r\n                            <div style={{display: \"flex\", justifyContent: \"center\"}}>\r\n                                <div style={{width: \"50%\", margin: \"10px\"}}>\r\n                                    <h3>Filled</h3>\r\n                                    <img src={FilledImage} style={{width: \"80%\"}} />\r\n                                </div>\r\n                                <div style={{width: \"50%\", margin: \"10px\"}}>\r\n                                    <h3>Not Filled</h3>\r\n                                    <img src={UnfilledImage} style={{width: \"75%\"}} />\r\n                                    <br />\r\n                                    <i style={{fontSize: 10}}>The Avengers Logo is a trademark of Disney.</i>\r\n                                </div>\r\n                            </div>\r\n                            <i style={{fontSize: 15}}>Selecting the <strong>fill</strong> option may take a longer time to digitize.</i>\r\n                        </div>\r\n                        :\r\n                        <div>\r\n                            Different embroidery machines accept different file types for their embroidery designs.\r\n                            <a href=\"https://www.embroidery.com/machine-embroidery-formats.ec\"> Here is a table with common embroidery machines and what files they accept. </a>\r\n                            Note that many machines accept multiple file types and aren't limited by what is listed below.\r\n\r\n                            <br />\r\n\r\n                            <i style={{fontSize: 10}}>If your Machine is not listed, go with one of the common formats(<strong>PES, PEC, DST, or EXP</strong>)</i>\r\n\r\n                        </div>\r\n                    }\r\n                </Modal.Body>\r\n            </Modal>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Upload;","import React, { useEffect, useState } from \"react\";\r\nimport Button from \"react-bootstrap/esm/Button\";\r\nimport Collapse from \"react-bootstrap/esm/Collapse\";\r\nimport { Redirect } from \"react-router\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Footer from \"../components/Footer\";\r\nimport { API_ENDPOINT } from \"../constants\";\r\n\r\nimport \"../styles/toast.css\";\r\nimport \"../styles/toastify.css\";\r\n\r\nconst Preview: React.FC<{embResult: any}> = ({embResult}) => {\r\n    const showPercent = 35;\r\n    const M_amount = 500000000;\r\n\r\n    let toast_message = \"{{ toast_message }}\"\r\n\r\n    const [animating, setAnimating] = useState(false);\r\n    const [downloadStatus, setDownloadStatus] = useState(\"Download Embroidery File\")\r\n\r\n    const history = useHistory();\r\n\r\n    function randomColor(){\r\n        const randomColor = Math.floor(Math.random()*16777215).toString(16);\r\n        return \"#\" + randomColor\r\n    }\r\n\r\n    function sleep(ms: number) { return new Promise(resolve => setTimeout(resolve, ms));}\r\n    \r\n    function showToast(msg?: string) {\r\n        if(msg)\r\n            embResult.toast = msg;\r\n        \r\n        if(toast_message != \"\"){\r\n            let x = document.getElementById(\"snackbar\")!;\r\n            x.className = \"show\";\r\n            setTimeout(function(){ x.className = x.className.replace(\"show\", \"\"); }, 3000);\r\n        \r\n        }\r\n    }\r\n\r\n    const run = async () => {\r\n        let run_button = document.getElementById(\"run_button\")! as HTMLButtonElement\r\n        let run_button_holder = document.getElementById(\"run_button_holder\")!\r\n        let progress_bar = document.getElementById(\"progress_bar\")!\r\n        let progress = document.getElementById(\"sim_progress\")!\r\n\r\n        setAnimating(true)\r\n        \r\n        if(run_button) {\r\n            run_button.disabled = true;\r\n            progress_bar.style.display = \"block\";\r\n            progress.style.width = \"0%\"\r\n        }\r\n\r\n        var canvas = document.getElementById(\"sim_canvas\") as HTMLCanvasElement;\r\n        var ctx = canvas.getContext(\"2d\")!;\r\n        var points = embResult.gcode; \r\n        let total = points.length\r\n\r\n        let width = canvas.width\r\n        let height = canvas.height\r\n\r\n        let multiply = 2\r\n\r\n        ctx.clearRect(0, 0, width, height);\r\n        \r\n        try {\r\n\r\n            let max_x = -Infinity;\r\n            let max_y = -Infinity;\r\n            let min_x = Infinity;\r\n            let min_y = Infinity;\r\n\r\n            points.forEach((point: number[]) => {\r\n                max_x = Math.max(point[0], max_x);\r\n                max_y = Math.max(point[1], max_y);\r\n                min_x = Math.min(point[0], min_x);\r\n                min_y = Math.min(point[1], min_y);\r\n            });\r\n\r\n            let x_ratio = width/max_x;\r\n            let y_ratio = height/max_y;\r\n            \r\n\r\n            ctx.moveTo(points[0][0] * multiply * Math.min(x_ratio, y_ratio), points[0][1] * multiply * Math.min(x_ratio, y_ratio));\r\n            ctx.strokeStyle = randomColor()\r\n            ctx.beginPath();\r\n            for (let i = 1; i < total - 1; i++) {\r\n                let x = points[i][0] * multiply;\r\n                let y = points[i][1] * multiply;\r\n                \r\n                if(x == multiply*M_amount && y == multiply*M_amount){\r\n                    ctx.closePath();\r\n                    ctx.moveTo(points[i+1][0] * multiply, points[i+1][1] * multiply)\r\n                    let newColor = randomColor()\r\n                    let toastify = (window as any).Toastify({\r\n                        text: \"Started a new path with color: \" + newColor,\r\n                        duration: 2000,\r\n                        backgroundColor: newColor,\r\n                        position: 'right'\r\n                    }).showToast();\r\n                    ctx.strokeStyle = newColor\r\n                    ctx.beginPath();\r\n                }else{\r\n                    ctx.lineTo(x,y);\r\n    \r\n                    ctx.stroke();\r\n    \r\n                    let percent = (100 * (i/total))\r\n                    if(percent >= showPercent){\r\n                        progress.innerHTML = i.toString() + \" stitches\"\r\n                    }else{\r\n                        progress.innerHTML = \"\"\r\n                    }\r\n                    progress.style.width = percent.toString() + \"%\"\r\n                }\r\n    \r\n               \r\n    \r\n                await sleep(20);\r\n            }\r\n            \r\n            await sleep(1000);\r\n    \r\n            run_button.disabled = false;\r\n            progress_bar.style.display = \"none\";\r\n    \r\n            progress.style.width = \"0%\"\r\n            setAnimating(false);\r\n        } catch (e) {\r\n            embResult.toast = `Sorry, an Error Occurred in the Preview. ${e}`\r\n            alert(e)\r\n            showToast()\r\n            setAnimating(false);\r\n        }\r\n    }\r\n\r\n    const download = () => {\r\n        setDownloadStatus(\"File Already Downloaded\");\r\n\r\n        const data = new FormData();\r\n        data.set(\"uid\", embResult.uid);\r\n\r\n        fetch(API_ENDPOINT + \"/download\", {\r\n            method: \"POST\",\r\n            body: data\r\n        }).then((response) => {\r\n            if(response.status == 400){\r\n                showToast(\"File not found.. redirecting in 5 seconds.\")\r\n                return setTimeout(() => {\r\n                    history.push(\"/\")\r\n                }, 5000)\r\n            }\r\n            response.blob().then((blob) => {\r\n                const url = URL.createObjectURL(blob);\r\n                const a = document.createElement(\"a\");\r\n                a.href = url;\r\n                a.download = embResult.file;\r\n                a.id = \"DOWNLOAD_LINK\";\r\n                a.style.display = \"none\";\r\n\r\n                const clickHandler = () => {\r\n                    setTimeout(() => {\r\n                        URL.revokeObjectURL(url);\r\n                        a.removeEventListener('click', clickHandler)\r\n                        // document.removeChild(document.getElementById(a.id)!);\r\n                    }, 100);\r\n                }\r\n\r\n                a.addEventListener(\"click\", clickHandler, false);\r\n                document.body.appendChild(a);\r\n                a.click();\r\n            });\r\n        })\r\n    }\r\n    \r\n    useEffect(() => {\r\n        if(embResult) {\r\n            if(embResult.toast)\r\n                showToast();\r\n    \r\n            download();\r\n            run();\r\n        } else {\r\n            history.push(\"/\");\r\n        }\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            {\r\n                embResult.gcode ?\r\n                <div style={{textAlign: \"center\"}}>\r\n                    <h1>Digitization Complete</h1>\r\n                    <canvas id=\"sim_canvas\" width=\"500%\" height=\"500%\" style={{border: \"1px solid #d3d3d3\", borderRadius: \"10px\"}}>\r\n                        Sorry, your browser doesn't support the embroidery simulation.\r\n                    </canvas>\r\n\r\n                    <br />\r\n\r\n                    <Collapse in={animating}>\r\n                        <div id=\"progress_bar\">\r\n                            <div className=\"progress\" style={{width: \"35%\", margin: \"auto\", height: \"12px\"}}>\r\n                                <div id=\"sim_progress\" style={{width: \"0%\"}} className=\"progress-bar\" role=\"progressbar\" aria-valuemin={0} aria-valuemax={100}></div>\r\n                            </div>\r\n                        </div>\r\n                    </Collapse>\r\n\r\n                    <div id=\"run_button_holder\">\r\n                        <br style={{margin: \"10px\"}} />\r\n                        <button className=\"btn btn-success\" onClick={run} id=\"run_button\">Animate <strong>{embResult.gcode.length}</strong> stitches</button>\r\n                    </div>\r\n\r\n                    <hr style={{width: \"75%\"}} />\r\n\r\n                    <Button onClick={download} variant=\"outline-info\" disabled={downloadStatus == \"File Already Downloaded\"}>\r\n                        {downloadStatus}\r\n                    </Button>\r\n\r\n                    <Footer />\r\n\r\n                    <div id=\"snackbar\">{embResult.toast}</div>\r\n                </div>\r\n\r\n                : <Redirect to=\"/\" />\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Preview;","import React, { useEffect, useRef, useState } from 'react';\r\nimport { BrowserRouter as Router, Redirect, Route, useLocation } from \"react-router-dom\";\r\nimport TransitionGroup from 'react-transition-group/TransitionGroup';\r\nimport CSSTranstion from \"react-transition-group/CSSTransition\";\r\n\r\nimport Home from \"./pages/Home\";\r\nimport Upload from \"./pages/Upload\";\r\nimport Unknown from \"./pages/Unknown\";\r\n\r\nimport \"./styles/transition.css\";\r\nimport Switch from 'react-bootstrap/esm/Switch';\r\nimport Preview from './pages/Preview';\r\n\r\nconst resp = require(\"./resp.json\")\r\n\r\nconst App: React.FC = () => {\r\n\r\n  const [emb, setEmb] = useState({});\r\n \r\n  return (\r\n    // <ScrollReveal ref={childRef}\r\n    //   // @ts-ignore\r\n    //   children={() => {\r\n        // <TransitionGroup>\r\n        //   <CSSTranstion \r\n        //     timeout={300}\r\n        //     classNames=\"transition\"\r\n        //     key={location.key}\r\n        //   >\r\n        <Router basename=\"/\">\r\n          <div className=\"Router\">\r\n            <Route path=\"/\" exact component={Home} />\r\n            <Route path=\"/upload\" exact >\r\n              <Upload setEmb={setEmb} />\r\n            </Route>\r\n            <Route path=\"/preview\" exact>\r\n              <Preview embResult={emb} />\r\n            </Route>\r\n          </div>\r\n        </Router>\r\n        //   </CSSTranstion>\r\n        // </TransitionGroup>\r\n    //   }}\r\n    // />\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}