{
    "version": 3,
    "sources": [
        "components/Footer.tsx",
        "assets/images/Embroider.png",
        "assets/images/Inkstitch.png",
        "pages/Home.tsx",
        "constants.ts",
        "components/Dropzone.tsx",
        "assets/images/FilledExample.png",
        "assets/images/UnfilledExample.png",
        "pages/Upload.tsx",
        "pages/Preview.tsx",
        "App.tsx",
        "reportWebVitals.ts",
        "index.tsx"
    ],
    "names": [
        "Footer",
        "sticky",
        "style",
        "textAlign",
        "position",
        "bottom",
        "width",
        "color",
        "href",
        "Home",
        "history",
        "useHistory",
        "useState",
        "stage",
        "setStage",
        "popup",
        "setPopup",
        "useEffect",
        "setTimeout",
        "type",
        "bg",
        "top",
        "zIndex",
        "Fade",
        "in",
        "fontSize",
        "Collapse",
        "display",
        "Button",
        "onClick",
        "Modal",
        "centered",
        "show",
        "onHide",
        "Header",
        "closeButton",
        "Title",
        "Body",
        "justifyContent",
        "border",
        "borderRadius",
        "height",
        "margin",
        "padding",
        "src",
        "Inkstitch",
        "objectFit",
        "marginLeft",
        "marginRight",
        "OverlayTrigger",
        "placement",
        "overlay",
        "Tooltip",
        "id",
        "size",
        "variant",
        "Embroider",
        "push",
        "API_ENDPOINT",
        "Dropzone",
        "file_drop_div",
        "image",
        "upload_help_label",
        "setFile",
        "filename",
        "setFilename",
        "reading",
        "setReading",
        "readingProgress",
        "setReadingProgress",
        "fileDragged",
        "borderStyle",
        "borderColor",
        "backgroundColor",
        "fileNotDragged",
        "document",
        "getElementById",
        "action",
        "method",
        "encType",
        "onDragEnter",
        "onMouseUp",
        "onDragLeave",
        "onChange",
        "fname",
        "value",
        "split",
        "pop",
        "includes",
        "innerHTML",
        "reader",
        "FileReader",
        "onload",
        "event",
        "target",
        "result",
        "onprogress",
        "percent",
        "loaded",
        "total",
        "Math",
        "round",
        "readAsDataURL",
        "files",
        "name",
        "accept",
        "className",
        "viewBox",
        "fill",
        "xmlns",
        "fill-rule",
        "d",
        "marginTop",
        "paddingBottom",
        "ProgressBar",
        "now",
        "justifySelf",
        "hidden",
        "Upload",
        "setEmb",
        "dropzoneSet",
        "setDropzoneSet",
        "dropdown",
        "setDropdown",
        "setValue",
        "popupType",
        "setPopupType",
        "pressed",
        "setPressed",
        "overflow",
        "e",
        "preventDefault",
        "Dropdown",
        "Toggle",
        "Menu",
        "map",
        "extension",
        "Item",
        "ToggleButtonGroup",
        "$",
        "documentElement",
        "body",
        "animate",
        "scrollTop",
        "offset",
        "ToggleButton",
        "fileInput",
        "data",
        "FormData",
        "append",
        "toLowerCase",
        "toString",
        "fetch",
        "then",
        "response",
        "json",
        "catch",
        "err",
        "alert",
        "sendFile",
        "disabled",
        "Spinner",
        "as",
        "animation",
        "role",
        "aria-hidden",
        "FilledImage",
        "UnfilledImage",
        "Preview",
        "embResult",
        "M_amount",
        "animating",
        "setAnimating",
        "downloadStatus",
        "setDownloadStatus",
        "randomColor",
        "floor",
        "random",
        "sleep",
        "ms",
        "Promise",
        "resolve",
        "showToast",
        "msg",
        "toast",
        "x",
        "replace",
        "run",
        "a",
        "run_button",
        "progress_bar",
        "progress",
        "canvas",
        "ctx",
        "getContext",
        "points",
        "gcode",
        "length",
        "multiply",
        "clearRect",
        "max_x",
        "Infinity",
        "max_y",
        "min_x",
        "min_y",
        "forEach",
        "point",
        "max",
        "min",
        "x_ratio",
        "y_ratio",
        "moveTo",
        "strokeStyle",
        "beginPath",
        "i",
        "y",
        "closePath",
        "newColor",
        "window",
        "Toastify",
        "text",
        "duration",
        "lineTo",
        "stroke",
        "download",
        "set",
        "uid",
        "status",
        "blob",
        "url",
        "URL",
        "createObjectURL",
        "createElement",
        "file",
        "addEventListener",
        "clickHandler",
        "revokeObjectURL",
        "removeEventListener",
        "appendChild",
        "click",
        "aria-valuemin",
        "aria-valuemax",
        "to",
        "App",
        "require",
        "emb",
        "basename",
        "path",
        "exact",
        "component",
        "reportWebVitals",
        "onPerfEntry",
        "Function",
        "getCLS",
        "getFID",
        "getFCP",
        "getLCP",
        "getTTFB",
        "ReactDOM",
        "render",
        "StrictMode"
    ],
    "mappings": "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",
    "file": "static/js/main.0caafc6f.chunk.js",
    "sourcesContent": [
        "import React from \"react\";\n\nconst Footer: React.FC<{sticky?: boolean}> = ({sticky}) => {\n    return (\n        <footer style={{textAlign: \"center\", position: sticky ? \"sticky\" : \"absolute\", bottom: \"5px\", width: \"100%\", color: \"gray\"}}>\n            This project is <a href=\"https://github.com/sanjithudupa/embroidery-digitizer\">Open Source.</a>\n            <br/>\n            <span>&#169;</span> 2021 <a href=\"https://youtube.com/sanjithar\">Sanjith Udupa</a>, All Rights Reserved.\n        </footer>\n    )\n}\n\nexport default Footer;",
        "export default __webpack_public_path__ + \"static/media/Embroider.e420d380.png\";",
        "export default __webpack_public_path__ + \"static/media/Inkstitch.3b3f493f.png\";",
        "import React, { useEffect, useState } from \"react\";\n\nimport Button from \"react-bootstrap/Button\";\nimport Footer from \"../components/Footer\";\n\nimport ParticleBG from \"particles-bg\"\nimport { useHistory } from \"react-router\";\nimport { Collapse, Fade, Modal, OverlayTrigger, Tooltip } from \"react-bootstrap\";\nimport { CustomPlaceholder } from 'react-placeholder-image';\n\nimport { Search, Clock, AppIndicator, ClockHistory, ZoomIn, Window } from \"react-bootstrap-icons\";\n\nimport Embroider from \"../assets/images/Embroider.png\";\nimport Inkstitch from \"../assets/images/Inkstitch.png\";\n\nconst Home: React.FC = () => {\n\n    const history = useHistory();\n    const [stage, setStage] = useState(0);\n\n    const [popup, setPopup] = useState(false);\n\n    useEffect(() => {\n        setTimeout(() => {\n            setStage(1)\n            setTimeout(() => {\n                setStage(2)\n                setTimeout(() => {\n                    setStage(3)\n                    setTimeout(() => {\n                        setStage(4)\n                    }, 500)\n                }, 750)\n            }, 600)\n        }, 500)\n    },[])\n\n    return (\n        <div>\n            <ParticleBG type=\"cobweb\" bg={true} color=\"#A23B72\" /> \n\n            <div style={{position: \"absolute\", top: \"30%\", width: \"100%\", textAlign: \"center\", zIndex: 0}}>\n                <Fade in={stage >= 1}>\n                    <h1 style={{fontSize:50}}>Embroidery made \n                        <Collapse in={stage >= 1}>\n                            <div style={{display: \"inline\"}}>\n                                <span style={{color: \"#F18F01\"}}> simple.</span>\n                            </div>\n                        </Collapse>\n                    </h1>\n                </Fade>\n\n                <Fade in={stage >= 2}>\n                    <div>\n                        Easily convert images to embroidery files <strong>in seconds.</strong> <a href=\"#\">See how it works.</a>\n                        <br/>\n                        <br/>\n                    </div>\n                </Fade>\n\n                <Fade in={stage >= 3}>\n                    <div>\n                        <i>Ready to start making great designs?</i>\n                        <br/>\n                        <br></br>\n                        <Fade in={stage >= 4}>\n                            <Button color=\"#A23B72\" onClick={() => setPopup(true) /*history.push(\"/upload\")*/}>Get Started</Button>\n                        </Fade>\n                    </div>\n                </Fade>\n            </div>\n\n            <Footer />\n\n            <Modal centered show={popup} onHide={() => setPopup(false)} style={{textAlign: \"center\"}}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Choose an embroidery strategy:</Modal.Title>\n                </Modal.Header>\n                <Modal.Body style={{display: \"flex\", justifyContent: \"center\"}}>\n                    <div style={{border: \"2px solid gray\", borderRadius: 5, height: \"230px\", width: \"100%\", margin: 10, padding: \"10px\"}}>\n                        <h5>InkStitch</h5>\n                        <img src={Inkstitch} style={{width: 180, height: 105, objectFit: \"cover\", border: \"2px solid black\"}} />\n                        {/* <CustomPlaceholder width={180} height={105} style={{borderRadius: 5}} /> */}\n                        <br />\n                        <div style={{margin: 5, display: \"flex\", justifyContent: \"center\"}}>\n                            <div style={{marginLeft: 5, marginRight: 5}}>\n                                <OverlayTrigger placement=\"top\" overlay={<Tooltip id=\"search\">High Quality</Tooltip>}>\n                                    <Search size={20} color=\"#44DA27\" />\n                                </OverlayTrigger>\n                            </div>\n                            <div style={{marginLeft: 5, marginRight: 5}}>\n                                <OverlayTrigger placement=\"top\" overlay={<Tooltip id=\"search\">Takes 15-25 min</Tooltip>}>\n                                    <Clock size={20} color=\"#A23B72\" />\n                                </OverlayTrigger>\n                            </div>\n                            <div style={{marginLeft: 5, marginRight: 5}}>\n                                <OverlayTrigger placement=\"top\" overlay={<Tooltip id=\"search\">Installation Required</Tooltip>}>\n                                    <AppIndicator size={20} color=\"#A23B72\" />\n                                </OverlayTrigger>\n                            </div>\n                        </div>\n                        {/* <i style={{fontSize: 12}}>15-25 min, High Quality, Requires Installation</i> */}\n                        <Button variant=\"info\">\n                            Read\n                        </Button>\n                    </div>\n                    <div style={{border: \"2px solid gray\", borderRadius: 5, height: \"230px\", width: \"100%\", margin: 10, padding: \"10px\"}}>\n                        <h5>Embroider.App</h5>\n                        <img src={Embroider} style={{width: 180, height: 105, objectFit: \"cover\", border: \"2px solid black\"}} />\n                        {/* <CustomPlaceholder width={180} height={105} style={{borderRadius: 5}} /> */}\n                        <br />\n                        <div style={{margin: 5, display: \"flex\", justifyContent: \"center\"}}>\n                            <div style={{marginLeft: 5, marginRight: 5}}>\n                                <OverlayTrigger placement=\"top\" overlay={<Tooltip id=\"search\">Takes <span>&#60;</span>5 min</Tooltip>}>\n                                    <ClockHistory size={20} color=\"#44DA27\" />\n                                </OverlayTrigger>\n                            </div>\n                            <div style={{marginLeft: 5, marginRight: 5}}>\n                                <OverlayTrigger placement=\"top\" overlay={<Tooltip id=\"search\">Fully in Browser, no installation required.</Tooltip>}>\n                                    <Window size={20} color=\"#44DA27\" />\n                                </OverlayTrigger>\n                            </div>\n                            <div style={{marginLeft: 5, marginRight: 5}}>\n                                <OverlayTrigger placement=\"top\" overlay={<Tooltip id=\"search\">Moderate Quality</Tooltip>}>\n                                    <ZoomIn size={20} color=\"#A23B72\" />\n                                </OverlayTrigger>\n                            </div>\n                        </div>\n                        {/* <i style={{fontSize: 12}}>15-25 min, High Quality, Requires Installation</i> */}\n                        <Button variant=\"success\" onClick={() => {\n                            setPopup(false);\n                            setTimeout(() => {\n                                history.push(\"/upload\");\n                            }, 500)\n                        }}>\n                            Get Started\n                        </Button>\n                    </div>\n                </Modal.Body>\n            </Modal>\n        </div>\n    )\n}\n\nexport default Home;",
        "const API_ENDPOINT = \"http://embdigit.cap.wise-creations.com/api\";\n\nexport {\n    API_ENDPOINT\n}",
        "import React, { useEffect, useState } from \"react\";\nimport ProgressBar from \"react-bootstrap/ProgressBar\";\n\nimport { API_ENDPOINT } from \"../constants\";\n\nimport \"../styles/dropzone.css\";\n\nconst Dropzone: React.FC<{setFile?: Function}> = ({setFile}) => {\n    let file_drop_div: HTMLDivElement;\n    let image: HTMLInputElement;\n    let upload_help_label: HTMLLabelElement;\n\n    const [filename, setFilename] = useState(\"\");\n    const [reading, setReading] = useState(false);\n    const [readingProgress, setReadingProgress] = useState(0);\n\n    // const FPS = 30;\n    // const [translate, setTranslate] = useState(0);\n    // const [scale, setScale] = useState(1);\n    \n    useEffect(() => {\n        file_drop_div = document.getElementById(\"file-drop-div\") as HTMLDivElement;\n        image = document.getElementById(\"image\") as HTMLInputElement;\n        upload_help_label = document.getElementById(\"upload-help-label\") as HTMLLabelElement;\n\n        // let frame = 0;\n\n        // setInterval(() => {\n        //     if (frame >= 600)\n        //         frame = 0\n            \n        //     setTranslate(Math.sin(frame/100));\n        //     setScale(-0.6 * Math.sin(frame));\n            \n        //     frame++;\n        // }, 1000/FPS);\n    }, []);\n\n    function fileDragged() {\n        if (file_drop_div) {\n            file_drop_div.style.borderStyle = \"solid\";\n            file_drop_div.style.borderColor = \"black\";\n            file_drop_div.style.backgroundColor = \"#f8f9fa\";\n        }\n    }\n    function fileNotDragged() {\n        if (file_drop_div) {\n            file_drop_div.style.borderStyle = \"dashed\";\n            file_drop_div.style.borderColor = \"#6c757d\";\n            file_drop_div.style.backgroundColor = \"transparent\";\n        }\n    }\n\n    function resetFileUpload(){\n        image.value = \"\"\n        upload_help_label.innerHTML = \"<strong>Click to select or drag an image...</strong>\"\n        fileNotDragged();\n    }\n\n    function fileAdded(){\n        fileNotDragged();\n        let fname = image.value.split(/(\\\\|\\/)/g).pop()!;\n        if(fname.includes(\".\")){\n            setFilename(fname);\n        }else{\n            resetFileUpload();\n        }\n        \n        const reader = new FileReader();\n        setReading(true);\n\n        reader.onload = (event) => {\n            const result = event.target!.result;\n            if(setFile)\n                setFile()\n            setReading(false);\n        };\n\n        reader.onprogress = (event) => {\n            const percent = ((event.loaded / event.total) * 100);\n            setReadingProgress(Math.round(percent));\n        };\n\n        reader.readAsDataURL(image.files![0]);\n    }\n\n    return (\n        <form id=\"dropzone_form\" action={`${API_ENDPOINT}/upload`} method = \"POST\" encType=\"multipart/form-data\">\n            <div id=\"file-drop-div\" onDragEnter={fileDragged} onClick={fileDragged} onMouseUp={fileNotDragged} onDragLeave={fileNotDragged}>\n                <input onChange={fileAdded} type=\"file\" name=\"image\" accept=\".svg\" id=\"image\" />\n                \n                <div id=\"svg-container\">\n                <svg id=\"upload-icon\" className=\"bi bi-upload\" width=\"10%\" viewBox=\"0 0 16 16\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n                    {/* <g transform={`translate(0, ${0}) scale(1, ${1})`}> */}\n                        <path fill-rule=\"evenodd\" d=\"M8 2a.5.5 0 0 1 .5.5v8a.5.5 0 0 1-1 0v-8A.5.5 0 0 1 8 2z\"/>\n                        <path d=\"M5 4.854a.5.5 0 0 0 .707 0L8 2.56l2.293 2.293A.5.5 0 1 0 11 4.146L8.354 1.5a.5.5 0 0 0-.708 0L5 4.146a.5.5 0 0 0 0 .708z\" />\n                    {/* </g> */}\n                    <path fill-rule=\"evenodd\" d=\"M.5 8a.5.5 0 0 1 .5.5V12a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V8.5a.5.5 0 0 1 1 0V12a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V8.5A.5.5 0 0 1 .5 8z\"/>\n                </svg>\n\n                {/* <svg id=\"upload-icon\" className=\"bi bi-upload\" xmlns=\"http://www.w3.org/2000/svg\" enable-background=\"new 0 0 24 24\" viewBox=\"0 0 24 24\" width=\"15%\" fill=\"#000000\">\n                    <g>\n                        <rect fill=\"none\" height=\"24\" width=\"24\"/>\n                    </g>\n                    <g>\n                        <path strokeWidth=\"5\" d=\"M18,15v3H6v-3H4v3c0,1.1,0.9,2,2,2h12c1.1,0,2-0.9,2-2v-3H18z M7,9l1.41,1.41L11,7.83V16h2V7.83l2.59,2.58L17,9l-5-5L7,9z\"/>\n                    </g>\n                </svg> */}\n\n\n                </div>\n                \n                <div id=\"help-label-container\" style={{textAlign: \"center\", marginTop: `-${reading ? 80 : 50}px`, paddingBottom: \"px\"}}>\n                    <label id=\"upload-help-label\"><strong>Click to select or drag an image...</strong> <br /> <strong style={{color: \"#A23B72\"}}>{filename}</strong> </label>\n                    {\n                        reading ?\n                        <ProgressBar now={readingProgress} style={{ width: \"75%\", justifySelf: \"center\", margin: \"auto\", height: \"10px\"}} />\n                        : <></>\n                    }\n                </div>\n            </div>\n\n            <input id=\"ext_input\" type=\"text\" hidden name=\"extension\" />\n            <input id=\"fill_input\" type=\"checkbox\" hidden name=\"fill\" />\n        </form>\n    )\n}\n\nexport default Dropzone;",
        "export default __webpack_public_path__ + \"static/media/FilledExample.c79c058b.png\";",
        "export default __webpack_public_path__ + \"static/media/UnfilledExample.752b7844.png\";",
        "import React, { useEffect, useState } from \"react\";\nimport { Button, Collapse, Modal, Spinner, ToggleButton, ToggleButtonGroup } from \"react-bootstrap\";\nimport Dropdown from \"react-bootstrap/Dropdown\";\nimport Dropzone from \"../components/Dropzone\";\nimport Footer from \"../components/Footer\";\n\nimport $ from \"jquery\";\nimport { API_ENDPOINT } from \"../constants\";\nimport { useHistory } from \"react-router\";\n\nimport FilledImage from \"../assets/images/FilledExample.png\";\nimport UnfilledImage from \"../assets/images/UnfilledExample.png\";\n\nconst Upload: React.FC<{setEmb: Function}> = ({setEmb}) => {\n\n    const extensions = [\n        \"PES\",\n        \"PEC\",\n        \"DST\",\n        \"EXP\",\n        \"JST\",\n        \"VP3\",\n        \"U01\"\n    ]\n\n    const [dropzoneSet, setDropzoneSet] = useState(false);\n\n    const [dropdown, setDropdown] = useState(\"Output File Type\");\n    const [value, setValue] = useState(\"\");\n    const [popup, setPopup] = useState(false);\n    const [popupType, setPopupType] = useState(true);\n\n    const [pressed, setPressed] = useState(false);\n\n    const history = useHistory();\n\n    const sendFile = () => {\n        setPressed(true);\n\n        const fileInput = document.getElementById(\"image\") as HTMLInputElement;\n\n        const data = new FormData();\n        data.append(\"image\", fileInput.files![0]);\n        data.append(\"extension\", `.${dropdown.toLowerCase()}`);\n        data.append(\"fill\", (value == \"Yes\").toString());\n\n        fetch(API_ENDPOINT + \"/digitize\", {\n            method: \"POST\",\n            body: data\n        }).then((response) => {\n            response.json().then((body) => {\n                setEmb(body);\n                history.push(\"/preview\");\n            }).catch((err) => {\n                alert(err);\n            });\n        });\n    }\n\n    return (\n        <div style={{height: \"100%\", overflow: \"hidden\"}}>\n            <div style={{textAlign: \"center\", height: \"99%\", overflow: \"auto\"}}>\n                <br />\n                <h2>Let's start digitizing!</h2>\n                <br />\n\n                <h6>First, <strong>upload</strong> an SVG image file.</h6>\n                <br />\n\n                <Dropzone setFile={() => setDropzoneSet(true)} />\n\n                <br />\n\n                <Collapse in={dropzoneSet}>\n                    <div>\n                        <h6>Now, choose your <strong>output file type.</strong></h6>\n                        <a href=\"#\" onClick={(e) => {\n                            e.preventDefault();\n                            setPopupType(false);\n                            setPopup(true);\n                        }}>Not sure which type to choose?</a>\n\n                        <br />\n                        <br />\n\n                        <Dropdown>\n                            <Dropdown.Toggle variant=\"info\">\n                                {dropdown}\n                            </Dropdown.Toggle>\n\n                            <Dropdown.Menu>\n                                {\n                                    extensions.map((extension) => {\n                                        return <Dropdown.Item onClick={() => setDropdown(extension)}>{extension}</Dropdown.Item>\n                                    })\n                                }\n                            </Dropdown.Menu>\n\n                        </Dropdown>\n\n                        <br />\n                        <br />\n                    </div>\n                </Collapse>\n\n                <Collapse in={dropdown != \"Output File Type\"}>\n                    <div>\n                        Great, would you like your file to be <strong>filled?</strong>\n                        <br />\n                        <a href=\"#\" onClick={(e) => {\n                            e.preventDefault();\n                            setPopupType(true);\n                            setPopup(true);\n                        }}>Show me what this means.</a>\n\n                        <br />\n                        <br />\n\n                        <ToggleButtonGroup\n                            name=\"value\"\n                            type=\"radio\"\n                            value={value}\n                            onChange={(value) => {\n                                setValue(value);\n                                setTimeout(() => {\n                                    $([document.documentElement, document.body]).animate({\n                                        scrollTop: $(\"#sendButton\").offset()!.top\n                                    }, 1000);\n                                }, 50);\n                            }}\n                        >\n                            <ToggleButton value={\"Yes\"} variant=\"secondary\">Yes</ToggleButton>\n                            <ToggleButton value={\"No\"} variant=\"secondary\">No</ToggleButton>\n                        </ToggleButtonGroup>\n\n                        <br />\n                        <br />\n                    </div>\n                </Collapse>\n\n                <Collapse in={value == \"Yes\" || value == \"No\"}>\n                    <div>\n                        Now, start the digitzation process!\n                        <br />\n                        <i>This may take up to two minutes</i>\n\n                        <br />\n                        <br />\n\n                        <Button id=\"sendButton\" variant=\"success\" onClick={() => sendFile()} disabled={pressed}>\n                            { pressed ?\n                                <Spinner\n                                    as=\"span\"\n                                    animation=\"border\"\n                                    size=\"sm\"\n                                    role=\"status\"\n                                    aria-hidden=\"true\"\n                                /> :\n                                <span>Digitize!</span>\n                            }\n                        </Button>\n\n                        <br />\n                    </div>\n                </Collapse>           \n\n            </div>\n            <br />\n            <br />\n            <Footer sticky={dropdown != \"Output File Type\"} />\n\n            <Modal centered show={popup} onHide={() => setPopup(false)} style={{textAlign: \"center\"}}>\n                <Modal.Header closeButton>\n                    <Modal.Title>{popupType ? \"Filled Embroidery\" : \"What File Type Should I Use?\"}</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    {\n                        popupType ? \n                        <div>\n                            <div style={{display: \"flex\", justifyContent: \"center\"}}>\n                                <div style={{width: \"50%\", margin: \"10px\"}}>\n                                    <h3>Filled</h3>\n                                    <img src={FilledImage} style={{width: \"80%\"}} />\n                                </div>\n                                <div style={{width: \"50%\", margin: \"10px\"}}>\n                                    <h3>Not Filled</h3>\n                                    <img src={UnfilledImage} style={{width: \"75%\"}} />\n                                    <br />\n                                    <i style={{fontSize: 10}}>The Avengers Logo is a trademark of Disney.</i>\n                                </div>\n                            </div>\n                            <i style={{fontSize: 15}}>Selecting the <strong>fill</strong> option may take a longer time to digitize.</i>\n                        </div>\n                        :\n                        <div>\n                            Different embroidery machines accept different file types for their embroidery designs.\n                            <a href=\"https://www.embroidery.com/machine-embroidery-formats.ec\"> Here is a table with common embroidery machines and what files they accept. </a>\n                            Note that many machines accept multiple file types and aren't limited by what is listed below.\n\n                            <br />\n\n                            <i style={{fontSize: 10}}>If your Machine is not listed, go with one of the common formats(<strong>PES, PEC, DST, or EXP</strong>)</i>\n\n                        </div>\n                    }\n                </Modal.Body>\n            </Modal>\n\n        </div>\n    )\n}\n\nexport default Upload;",
        "import React, { useEffect, useState } from \"react\";\nimport Button from \"react-bootstrap/esm/Button\";\nimport Collapse from \"react-bootstrap/esm/Collapse\";\nimport { Redirect } from \"react-router\";\nimport { useHistory } from \"react-router-dom\";\nimport Footer from \"../components/Footer\";\nimport { API_ENDPOINT } from \"../constants\";\n\nimport \"../styles/toast.css\";\nimport \"../styles/toastify.css\";\n\nconst Preview: React.FC<{embResult: any}> = ({embResult}) => {\n    const showPercent = 35;\n    const M_amount = 500000000;\n\n    let toast_message = \"{{ toast_message }}\"\n\n    const [animating, setAnimating] = useState(false);\n    const [downloadStatus, setDownloadStatus] = useState(\"Download Embroidery File\")\n\n    const history = useHistory();\n\n    function randomColor(){\n        const randomColor = Math.floor(Math.random()*16777215).toString(16);\n        return \"#\" + randomColor\n    }\n\n    function sleep(ms: number) { return new Promise(resolve => setTimeout(resolve, ms));}\n    \n    function showToast(msg?: string) {\n        if(msg)\n            embResult.toast = msg;\n        \n        if(toast_message != \"\"){\n            let x = document.getElementById(\"snackbar\")!;\n            x.className = \"show\";\n            setTimeout(function(){ x.className = x.className.replace(\"show\", \"\"); }, 3000);\n        \n        }\n    }\n\n    const run = async () => {\n        let run_button = document.getElementById(\"run_button\")! as HTMLButtonElement\n        let run_button_holder = document.getElementById(\"run_button_holder\")!\n        let progress_bar = document.getElementById(\"progress_bar\")!\n        let progress = document.getElementById(\"sim_progress\")!\n\n        setAnimating(true)\n        \n        if(run_button) {\n            run_button.disabled = true;\n            progress_bar.style.display = \"block\";\n            progress.style.width = \"0%\"\n        }\n\n        var canvas = document.getElementById(\"sim_canvas\") as HTMLCanvasElement;\n        var ctx = canvas.getContext(\"2d\")!;\n        var points = embResult.gcode; \n        let total = points.length\n\n        let width = canvas.width\n        let height = canvas.height\n\n        let multiply = 2\n\n        ctx.clearRect(0, 0, width, height);\n        \n        try {\n\n            let max_x = -Infinity;\n            let max_y = -Infinity;\n            let min_x = Infinity;\n            let min_y = Infinity;\n\n            points.forEach((point: number[]) => {\n                max_x = Math.max(point[0], max_x);\n                max_y = Math.max(point[1], max_y);\n                min_x = Math.min(point[0], min_x);\n                min_y = Math.min(point[1], min_y);\n            });\n\n            let x_ratio = width/max_x;\n            let y_ratio = height/max_y;\n            \n\n            ctx.moveTo(points[0][0] * multiply * Math.min(x_ratio, y_ratio), points[0][1] * multiply * Math.min(x_ratio, y_ratio));\n            ctx.strokeStyle = randomColor()\n            ctx.beginPath();\n            for (let i = 1; i < total - 1; i++) {\n                let x = points[i][0] * multiply;\n                let y = points[i][1] * multiply;\n                \n                if(x == multiply*M_amount && y == multiply*M_amount){\n                    ctx.closePath();\n                    ctx.moveTo(points[i+1][0] * multiply, points[i+1][1] * multiply)\n                    let newColor = randomColor()\n                    let toastify = (window as any).Toastify({\n                        text: \"Started a new path with color: \" + newColor,\n                        duration: 2000,\n                        backgroundColor: newColor,\n                        position: 'right'\n                    }).showToast();\n                    ctx.strokeStyle = newColor\n                    ctx.beginPath();\n                }else{\n                    ctx.lineTo(x,y);\n    \n                    ctx.stroke();\n    \n                    let percent = (100 * (i/total))\n                    if(percent >= showPercent){\n                        progress.innerHTML = i.toString() + \" stitches\"\n                    }else{\n                        progress.innerHTML = \"\"\n                    }\n                    progress.style.width = percent.toString() + \"%\"\n                }\n    \n               \n    \n                await sleep(20);\n            }\n            \n            await sleep(1000);\n    \n            run_button.disabled = false;\n            progress_bar.style.display = \"none\";\n    \n            progress.style.width = \"0%\"\n            setAnimating(false);\n        } catch (e) {\n            embResult.toast = `Sorry, an Error Occurred in the Preview. ${e}`\n            alert(e)\n            showToast()\n            setAnimating(false);\n        }\n    }\n\n    const download = () => {\n        setDownloadStatus(\"File Already Downloaded\");\n\n        const data = new FormData();\n        data.set(\"uid\", embResult.uid);\n\n        fetch(API_ENDPOINT + \"/download\", {\n            method: \"POST\",\n            body: data\n        }).then((response) => {\n            if(response.status == 400){\n                showToast(\"File not found.. redirecting in 5 seconds.\")\n                return setTimeout(() => {\n                    history.push(\"/\")\n                }, 5000)\n            }\n            response.blob().then((blob) => {\n                const url = URL.createObjectURL(blob);\n                const a = document.createElement(\"a\");\n                a.href = url;\n                a.download = embResult.file;\n                a.id = \"DOWNLOAD_LINK\";\n                a.style.display = \"none\";\n\n                const clickHandler = () => {\n                    setTimeout(() => {\n                        URL.revokeObjectURL(url);\n                        a.removeEventListener('click', clickHandler)\n                        // document.removeChild(document.getElementById(a.id)!);\n                    }, 100);\n                }\n\n                a.addEventListener(\"click\", clickHandler, false);\n                document.body.appendChild(a);\n                a.click();\n            });\n        })\n    }\n    \n    useEffect(() => {\n        if(embResult) {\n            if(embResult.toast)\n                showToast();\n    \n            download();\n            run();\n        } else {\n            history.push(\"/\");\n        }\n    }, []);\n\n    return (\n        <>\n            {\n                embResult.gcode ?\n                <div style={{textAlign: \"center\"}}>\n                    <h1>Digitization Complete</h1>\n                    <canvas id=\"sim_canvas\" width=\"500%\" height=\"500%\" style={{border: \"1px solid #d3d3d3\", borderRadius: \"10px\"}}>\n                        Sorry, your browser doesn't support the embroidery simulation.\n                    </canvas>\n\n                    <br />\n\n                    <Collapse in={animating}>\n                        <div id=\"progress_bar\">\n                            <div className=\"progress\" style={{width: \"35%\", margin: \"auto\", height: \"12px\"}}>\n                                <div id=\"sim_progress\" style={{width: \"0%\"}} className=\"progress-bar\" role=\"progressbar\" aria-valuemin={0} aria-valuemax={100}></div>\n                            </div>\n                        </div>\n                    </Collapse>\n\n                    <div id=\"run_button_holder\">\n                        <br style={{margin: \"10px\"}} />\n                        <button className=\"btn btn-success\" onClick={run} id=\"run_button\">Animate <strong>{embResult.gcode.length}</strong> stitches</button>\n                    </div>\n\n                    <hr style={{width: \"75%\"}} />\n\n                    <Button onClick={download} variant=\"outline-info\" disabled={downloadStatus == \"File Already Downloaded\"}>\n                        {downloadStatus}\n                    </Button>\n\n                    <Footer />\n\n                    <div id=\"snackbar\">{embResult.toast}</div>\n                </div>\n\n                : <Redirect to=\"/\" />\n            }\n        </>\n    )\n}\n\nexport default Preview;",
        "import React, { useEffect, useRef, useState } from 'react';\nimport { BrowserRouter as Router, Redirect, Route, useLocation } from \"react-router-dom\";\nimport TransitionGroup from 'react-transition-group/TransitionGroup';\nimport CSSTranstion from \"react-transition-group/CSSTransition\";\n\nimport Home from \"./pages/Home\";\nimport Upload from \"./pages/Upload\";\nimport Unknown from \"./pages/Unknown\";\n\nimport \"./styles/transition.css\";\nimport Switch from 'react-bootstrap/esm/Switch';\nimport Preview from './pages/Preview';\n\nconst resp = require(\"./resp.json\")\n\nconst App: React.FC = () => {\n\n  const [emb, setEmb] = useState({});\n \n  return (\n    // <ScrollReveal ref={childRef}\n    //   // @ts-ignore\n    //   children={() => {\n        // <TransitionGroup>\n        //   <CSSTranstion \n        //     timeout={300}\n        //     classNames=\"transition\"\n        //     key={location.key}\n        //   >\n        <Router basename=\"/\">\n          <div className=\"Router\">\n            <Route path=\"/\" exact component={Home} />\n            <Route path=\"/upload\" exact >\n              <Upload setEmb={setEmb} />\n            </Route>\n            <Route path=\"/preview\" exact>\n              <Preview embResult={emb} />\n            </Route>\n          </div>\n        </Router>\n        //   </CSSTranstion>\n        // </TransitionGroup>\n    //   }}\n    // />\n  );\n}\n\nexport default App;\n",
        "import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n",
        "import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"
    ],
    "sourceRoot": ""
}